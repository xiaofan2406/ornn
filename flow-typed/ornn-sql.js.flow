declare type Value = string | number | void;

declare type InsertConfigReturns = string[] | string;

declare type InsertConfig = {|
  +tableName: string,
  +data: Object,
  +returns?: InsertConfigReturns,
|};

declare type ColumnConfig = {|
  name: string,
  type: string,
  required: boolean,
  default: ValueDefault | void,
  identity: boolean,
  primaryKey: boolean,
  unique: boolean,
|};

declare type CreateTableConfig = {|
  +tableName: string,
  +columns: ColumnConfig[],
|};

declare module '@ornn/sql' {
  declare class Insert {
    constructor(config: InsertConfig): CreateTable;
    +tableName: string;
    +sql: string;
  }

  declare export var Insert: typeof Insert;

  declare class CreateTable {
    constructor(config: CreateTableConfig): CreateTable;
    +tableName: string;
    +sql: string;
  }

  declare export var CreateTable: typeof CreateTable;

  declare function isVoid(target: any): boolean %checks(target === undefined);

  declare function isNull(target: any): boolean %checks(target === null);

  declare function isNil(target: any): boolean %checks(target === undefined ||
    target === null);

  declare function isFunction(target: any): boolean %checks(typeof target ===
    'function');

  declare function isObject(target: any): boolean %checks(target &&
    target.constructor === Object);

  declare export var helpers: {
    isVoid: typeof isVoid,
    isNull: typeof isNull,
    isNil: typeof isNil,
    isFunction: typeof isFunction,
    isObject: typeof isObject,
    STAR: '*',
  };
}
